knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
library(validate)
library(VIM)
library(mice)
library(MASS)
library(ggpubr)
library(rpart)
library(rpart.plot)
library(scales)
dataf <- read.csv("data/data.csv", encoding = "UTF-8")
head(dataf)
dataf$date <- as.Date(dataf$date)
dataf[c('prefix', 'country','publisher','bookid','checkdigit')] <- str_split_fixed(dataf$isbn, '-', 5)
summary(dataf)
summary(dataf$quantity)
ct <- check_that(dataf, quantity > 0, quantity > 100000000)
summary(ct)
barplot(ct[1:2], main="Errors in Quantity")
#Sử dụng hàm which để xác định những rows chứa errors
#quantity < 1
which(dataf$quantity <= 0)
#quantity > 100000000
which(dataf$quantity > 100000000)
dataf<-subset(dataf,dataf$quantity<=100000000 & dataf$quantity>0)
dim(dataf)
dataf %>%
mutate(month = format(date, "%m")) %>%
group_by(month) %>%
summarise(quantity = n()) %>%
ggplot(aes(x = month, y = quantity)) +
geom_col() +
labs(
title = "Số đầu sách đăng ký xuất bản theo tháng",
x = "Tháng",
y = "Số đầu sách"
)
dataf %>%
mutate(month = format(date, "%m")) %>%
group_by(month) %>%
summarise(quantity = sum(quantity)) %>%
ggplot(aes(x = month, y = quantity)) +
geom_col() +
labs(
title = "Số lượng sách đăng ký xuất bản theo tháng",
x = "Tháng",
y = "Số lượng sách"
)
dataf   %>%
group_by(publisher) %>%
summarise(quantity_per_publisher = sum(quantity)) %>%
arrange(desc(quantity_per_publisher)) %>%
head(10) %>%
ggplot(aes(x = reorder(publisher, quantity_per_publisher), y = quantity_per_publisher)) +
geom_col() +
labs(
title = "Top 10 nhà xuất bản có số lượng sách đăng ký xuất bản nhiều",
x = "Nhà xuất bản",
y = "Số lượng sách"
)
dataf   %>%
filter(publisher != "0" & publisher != "54") %>%
group_by(author) %>%
summarise(quantity_per_author = sum(quantity)) %>%
arrange(desc(quantity_per_author)) %>%
head(10) %>%
ggplot(aes(x = reorder(author, quantity_per_author), y = quantity_per_author)) +
geom_col()  +
scale_x_discrete(labels = label_wrap(10)) +
scale_y_continuous(labels = comma) +
labs(
title = "Top 10 tác giả có số lượng sách đăng ký xuất bản nhiều*",
x = "Tác giả",
y = "Số lượng sách"
)
dataf   %>%
filter(publisher != "0" & publisher != "54") %>%
group_by(name) %>%
summarise(quantity_per_title = sum(quantity)) %>%
arrange(desc(quantity_per_title)) %>%
head(10) %>%
ggplot(aes(x = reorder(name, quantity_per_title), y = quantity_per_title)) +
geom_col() +
scale_x_discrete(labels = label_wrap(10)) +
scale_y_continuous(labels = comma) +
labs(
title = "Top 10 sách có số lượng đăng ký xuất bản nhiều nhất",
x = "Sách",
y = "Số lượng sách"
)
dataf   %>%
group_by(self) %>%
summarise(quantity_per_self = sum(quantity)) %>%
ggplot(aes(x = self, y = quantity_per_self)) +
geom_col() +
labs(
title = "Tỉ lệ số lượng sách tự xuất bản và sách được nhà xuất bản khác xuất bản",
x = "Sách tự xuất bản",
y = "Số lượng sách"
)
dataf   %>%
group_by(self) %>%
summarise(count_per_self = n()) %>%
ggplot(aes(x = self, y = count_per_self)) +
geom_col() +
labs(
title = "Tỉ lệ số đầu sách tự xuất bản và sách được nhà xuất bản khác xuất bản",
x = "Sách tự xuất bản",
y = "Số đầu sách"
)
dataf   %>%
mutate(title_length = nchar(name)) %>%
group_by(title_length) %>%
summarise(quantity_per_title_length = sum(quantity)) %>%
ggplot(aes(x = title_length, y = quantity_per_title_length)) +
geom_col() +
labs(
title = "Số lượng sách đăng ký xuất bản theo độ dài tên sách",
x = "Độ dài tên sách",
y = "Số lượng sách"
)
dataf   %>%
mutate(title_length = nchar(name)) %>%
filter(title_length <= 100 ) %>%
group_by(title_length) %>%
summarise(quantity_per_title_length = sum(quantity)) %>%
ggplot(aes(x = title_length, y = quantity_per_title_length)) +
geom_col() +
labs(
title = "Số lượng sách đăng ký xuất bản theo độ dài tên sách",
x = "Độ dài tên sách",
y = "Số lượng sách"
)
dataf   %>%
group_by(translator) %>%
filter(translator!="" & translator!= "NA") %>%
summarise(quantity_per_translator = sum(quantity)) %>%
arrange(desc(quantity_per_translator)) %>%
head(10) %>%
ggplot(aes(x = reorder(translator, quantity_per_translator), y = quantity_per_translator)) +
geom_col() +
scale_x_discrete(labels = label_wrap(10)) +
scale_y_continuous(labels = comma) +
labs(
title = "Top 10 dịch giả có số lượng sách đăng ký xuất bản nhiều",
x = "Dịch giả",
y = "Số lượng sách"
)
#sử dụng hàm tapply
tapply(dataf$quantity,dataf$self, mean)
options(scipen=999)
self <- dataf$self
quantity <- dataf$quantity
ggscatter(data=dataf, x = "self", y = "quantity", main = "Biểu đồ phân tán")+
geom_smooth(method="lm", se=F)
boxplot(dataf$quantity ~ dataf$self)
dataf <- dataf %>%
mutate(self_new = case_when(is.na(self) ~ "", TRUE ~ self) %>% as.factor())
dataf$self_new <- as.character(dataf$self_new)
#gán giá trị để phân tích}
dataf$self_new[dataf$self_new== "x"] <- "1"
dataf$self_new[dataf$self_new== ""] <- "0"
dataf$self_new <- as.numeric(dataf$self_new)
#mean đã thay đổi sau khi gom nhóm
tapply(dataf$quantity,dataf$self_new, mean)
ggplot(dataf, aes(x=dataf$self_new)) + geom_bar()
prop.table(table(dataf$self_new))
# tách date
dataf[c('year', 'month','date')] <- str_split_fixed(dataf$date, '-', 3)
#Lựa chọn các biến tiến hành phân tích
dataf <- subset(dataf, select = -c(self,name,translator,author,partner,prefix,country,bookid,date,year))
dataf = dataf[complete.cases(dataf),]
#install.packages("caTools")
library("caTools")
set.seed(100)
split <- sample.split(dataf$self_new, SplitRatio = 0.75)
mau_xay_dung <- subset(dataf, split = TRUE)
mau_kiem_dinh <- subset(dataf, split = FALSE)
#đổi kiểu dữ liệu factor cho self
mau_xay_dung$self_new <- as.factor(mau_xay_dung$self_new)
mau_kiem_dinh$self_new <- as.factor(mau_kiem_dinh$self_new)
dataf$publisher <- as.numeric(dataf$publisher)
dataf$month <- as.numeric(dataf$month)
dataf$quantity <- as.numeric(dataf$quantity)
dataf$self_new <-as.factor(dataf$self_new)
options(scipen=999)
Tree_1 <- rpart(self_new ~ quantity+month+checkdigit,
method = "class", data = mau_xay_dung, control=rpart.control(minbucket=25))
rpart.plot(Tree_1)
#Tạo biến dự đoán dựa trên mẫu kiểm định
Predict_test_tree_1 <- predict(Tree_1, newdata = mau_kiem_dinh, type = "class")
table(mau_kiem_dinh$self_new,Predict_test_tree_1)
#Gán table vào biến
matrix <- table(mau_kiem_dinh$self_new, Predict_test_tree_1)
#Gán table vào biến
matrix <- table(mau_kiem_dinh$self_new, Predict_test_tree_1)
#Độ chính xác trên mẫu kiểm định
(matrix[1,1]+matrix[2,2])/nrow(mau_kiem_dinh)
